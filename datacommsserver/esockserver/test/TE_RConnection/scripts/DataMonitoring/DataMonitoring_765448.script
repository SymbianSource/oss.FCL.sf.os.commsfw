//
// Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName NET-DATAMON
//! @SYMScriptTestEnvironment Standard Symbian HRP or emulator environment


// Load the test suite and esock
LOAD_SUITE te_esockteststepsSuite -SharedData

RUN_SCRIPT Z:\TestData\scripts\te_esock_test_unloadesockForced.script
ced -i  z:\testdata\configs\DataMonitoring\DataMonitoring.ced.cfg c:\DataMonitoring.ced.cfg
RUN_SCRIPT z:\TestData\scripts\te_esock_test_loadesock.script


START_TESTCASE			COMINF-ESOCK-RConnection-DataMonitoring-3401
//! @SYMTestCaseID		COMINF-ESOCK-RConnection-DataMonitoring-3401
//!@SYMTestCaseDesc           	Confirm valid reception of data sent notification for whole connection when multiple active subconnections
//!@SYMPREQ                   	PREQ399
//!@SYMAPI
//RCommsDataMonitoringApiExt::Open()
//RCommsDataMonitoringApiExt::RequestDataSentNotification()
//RCommsDataMonitoringApiExt::Close()
//!@SYMTestPriority           	Critical
//!@SYMTestActions
//Create, open and start a connection explicitly.
//Open and connect a TCP socket Socket1 on the connection.
//Create and open a secondary subconnection SubConn1 on the connection.
//Set QoS parameters on SubConn1 and add Socket1 to it.
//Open and connect a second socket Socket2 on the connection.
//Open a data monitor DataMonitor1 on the connection as a whole and request notification on it with ::RequestDataSentNotification().
//In several separate iterations alternately send and receive data on Socket1 and Socket2 and confirming while the total is under the threshold for the connection that the notification does not complete. Finally send data to push it over the threshold and confirm that it does then complete.
//!@SYMTestType               	CIT
//!@SYMTestExpectedResults    	In each case expect notification only after sending the number of bytes required to meet the trigger threshold.

// Create and connect the socket server required
RUN_TEST_STEP 100 te_esockteststepsSuite creatersocketservStep z:\testdata\configs\DataMonitoring\765448.ini CreateSockSvr1
RUN_TEST_STEP 100 te_esockteststepsSuite connectrsocketservStep z:\testdata\configs\DataMonitoring\765448.ini ConnectSockSvr1

// Establish connection and start it explicitly with IAP ID
RUN_TEST_STEP 100 te_esockteststepsSuite createrconnectionStep z:\testdata\configs\DataMonitoring\765448.ini CreateConn1
RUN_TEST_STEP 100 te_esockteststepsSuite openRConnectionStep z:\testdata\configs\DataMonitoring\765448.ini OpenConn1
RUN_TEST_STEP 100 te_esockteststepsSuite StartRConnectionStep z:\testdata\configs\DataMonitoring\765448.ini StartConn1

// Open a socket (socket1) associated with the connection conn1
RUN_TEST_STEP 100 te_esockteststepsSuite creatersocketStep z:\testdata\configs\DataMonitoring\765448.ini CreateSock1
RUN_TEST_STEP 100 te_esockteststepsSuite openrsocketStep z:\testdata\configs\DataMonitoring\765448.ini OpenSock1
RUN_TEST_STEP 100 te_esockteststepsSuite connectrsocketStep z:\testdata\configs\DataMonitoring\765448.ini ConnectSock1OnConn1

// Create and open a secondary subconnection on the connection (subconn1)
RUN_TEST_STEP 100 te_esockteststepsSuite creatersubconnectionStep z:\testdata\configs\DataMonitoring\765448.ini CreateSubConn1
RUN_TEST_STEP 100 te_esockteststepsSuite openrsubconnectionStep z:\testdata\configs\DataMonitoring\765448.ini OpenSubConn1
RUN_TEST_STEP 100 te_esockteststepsSuite creatersubconparameterbundleStep z:\testdata\configs\DataMonitoring\765448.ini CreateParamsForSubConn1


// Set QoS parameters for subconn1 and add socket1 to it
RUN_TEST_STEP 100 te_esockteststepsSuite initialisersubconparameterfamilyStep z:\testdata\configs\DataMonitoring\765448.ini InitParamFamilyForSubConn1
RUN_TEST_STEP 100 te_esockteststepsSuite setrsubconparametersStep z:\testdata\configs\DataMonitoring\765448.ini SetParamsOnSubConn1
RUN_TEST_STEP 100 te_esockteststepsSuite addrsockettorsubconnectionStep z:\testdata\configs\DataMonitoring\765448.ini AddSock1ToSubConn1

// Open a 2nd socket (socket2) associated with the connection conn1
RUN_TEST_STEP 100 te_esockteststepsSuite creatersocketStep z:\testdata\configs\DataMonitoring\765448.ini CreateSock2
RUN_TEST_STEP 100 te_esockteststepsSuite openrsocketStep z:\testdata\configs\DataMonitoring\765448.ini OpenSock2
RUN_TEST_STEP 100 te_esockteststepsSuite connectrsocketStep z:\testdata\configs\DataMonitoring\765448.ini ConnectSock2OnConn1

// Create a data monitoring extension API for the whole connection conn1 and issue request for data sent on it
RUN_TEST_STEP 100 te_esockteststepsSuite OpenRCommsDataMonitoringApiExtStep z:\testdata\configs\DataMonitoring\765448.ini OpenDataMonitorOnConn1
RUN_TEST_STEP 100 te_esockteststepsSuite RequestDataSentNotificationStep z:\testdata\configs\DataMonitoring\765448.ini RequestDataSentOnConn1

// Alternately send and receive data on each socket (sockets socket1 and socket2) checking after each that the
// request has not been completed for conn1 as a whole until such time as the accumulated data has broken the
// notification threshold
RUN_TEST_STEP 100 te_esockteststepsSuite sendreceiversocketStep z:\testdata\configs\DataMonitoring\765448.ini SendReceiveSock1_1
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataSentNotificationStep z:\testdata\configs\DataMonitoring\765448.ini ReceiveSentNotifOnConn1_1
RUN_TEST_STEP 100 te_esockteststepsSuite sendreceiversocketStep z:\testdata\configs\DataMonitoring\765448.ini SendReceiveSock2_1
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataSentNotificationStep z:\testdata\configs\DataMonitoring\765448.ini ReceiveSentNotifOnConn1_2
RUN_TEST_STEP 100 te_esockteststepsSuite sendreceiversocketStep z:\testdata\configs\DataMonitoring\765448.ini SendReceiveSock1_2
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataSentNotificationStep z:\testdata\configs\DataMonitoring\765448.ini ReceiveSentNotifOnConn1_3
RUN_TEST_STEP 100 te_esockteststepsSuite sendreceiversocketStep z:\testdata\configs\DataMonitoring\765448.ini SendReceiveSock2_2
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataSentNotificationStep z:\testdata\configs\DataMonitoring\765448.ini ReceiveSentNotifOnConn1_4

// Close the networking entities we used
RUN_TEST_STEP 100 te_esockteststepsSuite CloseRCommsDataMonitoringApiExtStep z:\testdata\configs\DataMonitoring\765448.ini CloseDataMonitor
RUN_TEST_STEP 100 te_esockteststepsSuite closersubconnectionStep z:\testdata\configs\DataMonitoring\765448.ini CloseSubConn1
RUN_TEST_STEP 100 te_esockteststepsSuite closersocketStep z:\testdata\configs\DataMonitoring\765448.ini CloseSock1
RUN_TEST_STEP 100 te_esockteststepsSuite closersocketStep z:\testdata\configs\DataMonitoring\765448.ini CloseSock2
RUN_TEST_STEP 100 te_esockteststepsSuite closerconnectionStep z:\testdata\configs\DataMonitoring\765448.ini CloseConn1
RUN_TEST_STEP 100 te_esockteststepsSuite closersocketservStep z:\testdata\configs\DataMonitoring\765448.ini CloseSockSvr1
RUN_TEST_STEP 100 te_esockteststepsSuite cleanallStep
END_TESTCASE			COMINF-ESOCK-RConnection-DataMonitoring-3401


// Clean up
RUN_SCRIPT Z:\TestData\Scripts\te_esock_test_stopallinterfaces.script
RUN_SCRIPT Z:\TestData\scripts\te_esock_test_unloadesockForced.script


PRINT Completed NET-DATAMON-0448


