//
// Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//
//! @file
//! @SYMTestSuiteName NET-DATAMON
//! @SYMScriptTestEnvironment Standard Symbian HRP or emulator environment


// Load the test suite and esock
LOAD_SUITE te_esockteststepsSuite -SharedData

RUN_SCRIPT Z:\TestData\scripts\te_esock_test_unloadesockForced.script
ced -i  z:\testdata\configs\DataMonitoring\DataMonitoring.ced.cfg c:\DataMonitoring.ced.cfg
RUN_SCRIPT z:\TestData\scripts\te_esock_test_loadesock.script

START_TESTCASE			COMINF-ESOCK-RConnection-DataMonitoring-1601
//! @SYMTestCaseID		COMINF-ESOCK-RConnection-DataMonitoring-1601
//!@SYMTestCaseDesc           	Confirm valid reception of data received notifications on two connections on independent bearers
//!@SYMPREQ                   	PREQ399
//!@SYMAPI
//RCommsDataMonitoringApiExt::Open()
//RCommsDataMonitoringApiExt::RequestDataReceivedNotification()
//RCommsDataMonitoringApiExt::Close()
//!@SYMTestPriority           	Critical
//!@SYMTestActions
//Procedure identical to NET-DATAMON-0426.
//Use ::RequestDataReceivedNotification() instead of ::RequestDataSentNotification()
//Use ::CancelDataReceivedNotificationRequest() instead of ::CancelDataSentNotificationRequest()
//!@SYMTestType               	CIT
//!@SYMTestExpectedResults    	Expect valid notifications based on amount of data transferred.

// Create and connect the socket server required
RUN_TEST_STEP 100 te_esockteststepsSuite creatersocketservStep z:\testdata\configs\DataMonitoring\765430.ini CreateSockSvr1
RUN_TEST_STEP 100 te_esockteststepsSuite connectrsocketservStep z:\testdata\configs\DataMonitoring\765430.ini ConnectSockSvr1

// Create and explicitly start two connections on independent IAPs
RUN_TEST_STEP 100 te_esockteststepsSuite createrconnectionStep z:\testdata\configs\DataMonitoring\765430.ini CreateConn1
RUN_TEST_STEP 100 te_esockteststepsSuite openRConnectionStep z:\testdata\configs\DataMonitoring\765430.ini OpenConn1
RUN_TEST_STEP 100 te_esockteststepsSuite StartRConnectionStep z:\testdata\configs\DataMonitoring\765430.ini StartConn1
RUN_TEST_STEP 100 te_esockteststepsSuite createrconnectionStep z:\testdata\configs\DataMonitoring\765430.ini CreateConn2
RUN_TEST_STEP 100 te_esockteststepsSuite openRConnectionStep z:\testdata\configs\DataMonitoring\765430.ini OpenConn2
RUN_TEST_STEP 100 te_esockteststepsSuite StartRConnectionStep z:\testdata\configs\DataMonitoring\765430.ini StartConn2

// Enumerate the connections so we are sure we have what we expected
RUN_TEST_STEP 100 te_esockteststepsSuite EnumerateConnectionsStep z:\testdata\configs\DataMonitoring\765430.ini EnumerateConnections

// Open separate UDP sockets on each of our 2 established connections
RUN_TEST_STEP 100 te_esockteststepsSuite creatersocketStep z:\testdata\configs\DataMonitoring\765430.ini CreateSocket1
RUN_TEST_STEP 100 te_esockteststepsSuite openrsocketStep z:\testdata\configs\DataMonitoring\765430.ini OpenSocket1
RUN_TEST_STEP 100 te_esockteststepsSuite connectrsocketStep z:\testdata\configs\DataMonitoring\765430.ini ConnectSocket1
RUN_TEST_STEP 100 te_esockteststepsSuite creatersocketStep z:\testdata\configs\DataMonitoring\765430.ini CreateSocket2
RUN_TEST_STEP 100 te_esockteststepsSuite openrsocketStep z:\testdata\configs\DataMonitoring\765430.ini OpenSocket2
RUN_TEST_STEP 100 te_esockteststepsSuite connectrsocketStep z:\testdata\configs\DataMonitoring\765430.ini ConnectSocket2

// Create data monitoring APIs for each of our connections
RUN_TEST_STEP 100 te_esockteststepsSuite OpenRCommsDataMonitoringApiExtStep z:\testdata\configs\DataMonitoring\765430.ini OpenDataMonitor1
RUN_TEST_STEP 100 te_esockteststepsSuite OpenRCommsDataMonitoringApiExtStep z:\testdata\configs\DataMonitoring\765430.ini OpenDataMonitor2

// Issue data received notification request for each connection
RUN_TEST_STEP 100 te_esockteststepsSuite RequestDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RequestReceivedOnMonitor1_1
RUN_TEST_STEP 100 te_esockteststepsSuite RequestDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RequestReceivedOnMonitor2_1

// Send data in chunks (on connection 1 only) waiting for expected data received notification
// Expect timeout for the first two waits and completion on the third
// Check against minimum expected data volume received
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RecvNotifMonitor1_1
RUN_TEST_STEP 100 te_esockteststepsSuite sendreceiversocketStep z:\testdata\configs\DataMonitoring\765430.ini SendReceiveSocket1_1
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RecvNotifMonitor1_2
RUN_TEST_STEP 100 te_esockteststepsSuite sendreceiversocketStep z:\testdata\configs\DataMonitoring\765430.ini SendReceiveSocket1_2
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RecvNotifMonitor1_3
RUN_TEST_STEP 100 te_esockteststepsSuite sendreceiversocketStep z:\testdata\configs\DataMonitoring\765430.ini SendReceiveSocket1_3
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RecvNotifMonitor1_4

// It is not easy to test receive notification on connection 2 as this is a live ethernet connection. Any data that
// it receives from the LAN is counted so this may cause an unexpected notification to occur. Therefore the
// receive notification tests are not carried out on this connection.

// Issue the notification requests again for connection 1
RUN_TEST_STEP 100 te_esockteststepsSuite RequestDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RequestReceivedOnMonitor1_2

// First check that conn1 monitor times out (we didn't send any data on that one)
// Then cancel the monitor on conn1 and confirm that it is KErrCancel
RUN_TEST_STEP 100 te_esockteststepsSuite ReceiveDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini RecvNotifMonitor1_5
RUN_TEST_STEP 100 te_esockteststepsSuite CancelDataReceivedNotificationStep z:\testdata\configs\DataMonitoring\765430.ini CancelNotifDataMonitor1

// Close the networking entities we used
RUN_TEST_STEP 100 te_esockteststepsSuite CloseRCommsDataMonitoringApiExtStep z:\testdata\configs\DataMonitoring\765430.ini CloseDataMonitor1
RUN_TEST_STEP 100 te_esockteststepsSuite CloseRCommsDataMonitoringApiExtStep z:\testdata\configs\DataMonitoring\765430.ini CloseDataMonitor2
RUN_TEST_STEP 100 te_esockteststepsSuite closersocketStep z:\testdata\configs\DataMonitoring\765430.ini CloseSocket1
RUN_TEST_STEP 100 te_esockteststepsSuite closersocketStep z:\testdata\configs\DataMonitoring\765430.ini CloseSocket2
RUN_TEST_STEP 100 te_esockteststepsSuite closerconnectionStep z:\testdata\configs\DataMonitoring\765430.ini CloseConn1
RUN_TEST_STEP 100 te_esockteststepsSuite closerconnectionStep z:\testdata\configs\DataMonitoring\765430.ini CloseConn2
RUN_TEST_STEP 100 te_esockteststepsSuite closersocketservStep z:\testdata\configs\DataMonitoring\765430.ini CloseSockSvr1
RUN_TEST_STEP 100 te_esockteststepsSuite cleanallStep
END_TESTCASE			COMINF-ESOCK-RConnection-DataMonitoring-1601


// Clean up
RUN_SCRIPT Z:\TestData\Scripts\te_esock_test_stopallinterfaces.script
RUN_SCRIPT Z:\TestData\scripts\te_esock_test_unloadesockForced.script


PRINT Completed NET-DATAMON-0430



