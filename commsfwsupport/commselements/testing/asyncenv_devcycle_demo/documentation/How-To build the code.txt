
Before the productised infrastructure code hits the MCL,
the following locations apply and procedures must be
followed in order to use the transport, node, message
and the MeshMachine code.

1) CBR:
Get a green vFuture build excluding comms-infras,
networking, ser-comms-c32, i.e: using the command:
> getenv -o gt_techview_baseline M0XXXX_Symbian_OS_vFuture -x comms-infras_* -x networking_* -x ser-comms_c32
or
> getenv -o gt_techview_baseline M0XXXX_Symbian_OS_vFuture
but in this case you will have to perform additional tasks for 2)...

abld reallyclean
abld cleanexport
remove relevant files as in 1b) if listed.

...then continue with 2)

1b) optional:
Delete everything in epoc32/include/comms-infras except commsdebugutility.* and /commdb directory (3 items).
This is to avoid any duplicate headers in different locations. 
If you run cleanenv, the CBR may copy the CBR versions of comms-infras instead of the productisation ones.    

2) P4 sync from:
//EPOC/DV3/team/2006/convergedcomms/projects/productisation/common/

3) abld build winscw udeb:
//EPOC/DV3/team/2006/convergedcomms/projects/productisation/common/bld.inf

4) abld test build winscw udeb:
//EPOC/DV3/team/2006/convergedcomms/projects/productisation/common/comms-infras/Elements/Unittests/group

5) epoc32/data/epoc.ini:
Add "startupmode 1".
This will cause the emulator to run in console mode,
preventing loading of nonexisting comms libraries.

6) The demo application can be launched directly:
\epoc32\release\winscw\udeb\testnode.exe.

Debugging Notes:
Relevant breakpoints: all implementations of ReceivedL() (under //EPOC/DV3/team/2006/convergedcomms/projects/productisation/common/comms-infras/Elements/Unittests)
show when nodes received messages and then processed them. 